#BlueJ class context
comment0.target=Game
comment0.text=\r\n\ @author\ Andrew\ Le\r\n
comment1.params=
comment1.target=Game()
comment10.params=
comment10.target=Position\ choosePiece()
comment10.text=\r\n\ Prompts\ the\ user\ for\ the\ row\ and\ column\ indexes\ of\ the\ Piece\ to\ be\ moved\r\n\r\n\ @return\ a\ Position\ object\ with\ Piece's\ current\ location\r\n
comment11.params=row\ col\ color
comment11.target=boolean\ isValidPiece(int,\ int,\ int)
comment11.text=\r\n\ First\ checks\ whether\ the\ given\ row\ and\ column\ indexes\ are\ in\ bounds,\ then\r\n\ checks\ whether\ there\ is\ a\ Piece\ of\ the\ correct\ color\ at\ the\ specified\ row\ and\r\n\ column\ indexes\r\n\ \r\n\ @param\ row\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ row\ index\r\n\ @param\ col\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ column\ index\r\n\ @param\ color\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ 0\ for\ white,\ 1\ for\ black\r\n\ @return\ true\ if\ there\ is\ a\ Piece\ of\ the\ correct\ color\ at\ the\ row\ and\ column\r\n\ \ \ \ \ \ \ \ \ indexes,\ false\ otherwise\r\n
comment12.params=
comment12.target=Position\ chooseDestination()
comment12.text=\r\n\ Prompts\ the\ user\ for\ the\ row\ and\ column\ indexes\ of\ the\ Tile\ to\ which\ a\ Piece\r\n\ will\ be\ moved\r\n\r\n\ @return\ a\ Position\ object\ with\ the\ destination's\ coordinates\r\n
comment13.params=row\ col
comment13.target=boolean\ isWithinBounds(int,\ int)
comment13.text=\r\n\ Check\ whether\ the\ suggested\ row\ and\ column\ indexes\ are\ within\ the\ bounds\ of\r\n\ the\ gameBoard\ size\r\n\r\n\ @return\ true\ if\ the\ row\ and\ position\ are\ within\ bounds,\ false\ otherwise\r\n
comment14.params=color\ val
comment14.target=void\ incrementScore(int,\ int)
comment14.text=\r\n\ Increments\ the\ score\ of\ the\ player\ with\ the\ color\ OPPOSITE\ of\ the\ given\ color\r\n\ by\ the\ given\ value\r\n\ \r\n\ @param\ color\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ 0\ if\ black,\ 1\ if\ white\r\n\ @param\ val\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ value\ of\ the\ captured\ piece\r\n\ \r\n
comment15.params=color
comment15.target=Player\ getPlayer(int)
comment15.text=\r\n\ Accessor\ method\ to\ get\ the\ player\ with\ the\ given\ color\r\n\ \r\n\ @param\ color\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ 0\ for\ white,\ 1\ for\ black\r\n\ @return\ white\ player\ if\ color\ \=\ 0,\ black\ player\ if\ color\ \=\ 1\r\n
comment16.params=draw
comment16.target=void\ setDraw(boolean)
comment16.text=\r\n\ Mutator\ method\ that\ updates\ the\ draw\ status\ of\ the\ game\r\n\ \r\n\ @param\ draw\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ true\ if\ there\ is\ a\ draw,\ false\ otherwise\r\n
comment17.params=turn
comment17.target=void\ setTurn(boolean)
comment17.text=\r\n\ Mutator\ method\ that\ updates\ the\ turn\r\n\ \r\n\ @param\ turn\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ true\ if\ it\ is\ whitePlayer's\ turn,\ false\ otherwise\r\n
comment18.params=stale
comment18.target=void\ setStalemate(boolean)
comment18.text=\r\n\ Mutator\ method\ that\ updates\ stalemate\r\n\ \r\n\ @param\ stale\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ true\ if\ there\ is\ a\ stalemate,\ false\ otherwise\r\n
comment19.params=
comment19.target=boolean\ stalemate()
comment19.text=\r\n\ Determines\ whether\ there\ is\ stalemate.\ A\ game\ is\ in\ stalemate\ if\ and\ only\ if\:\r\n\ 1)\ the\ turn\ player\ is\ not\ in\ check\ and\ the\ turn\ player\ has\ no\ legal\ moves;\ 2)\r\n\ threefold\ repitition\ has\ occurred;\ 3)\ fifty-move\ rule\ applies\r\n\r\n\ @return\ true\ if\ there\ is\ a\ stalemate,\ false\ otherwise\r\n
comment2.params=name1\ name2
comment2.target=Game(java.lang.String,\ java.lang.String)
comment2.text=\r\n\ Constructor\ to\ initialize\ the\ players,\ gameBoard,\ and\ game\ state\r\n\ \r\n\ @param\ name1\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ whitePlayer's\ name\r\n\ @param\ name2\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ blackPlayer's\ name\r\n
comment20.params=promotedPawn
comment20.target=void\ promotion(Piece)
comment20.text=\r\n\ Prompts\ the\ user\ to\ choose\ a\ non-Pawn,\ non-King\ Piece\ to\ replace\ the\ given\r\n\ Pawn.\ A\ white\ Pawn\ is\ promoted\ if\ it\ is\ on\ row\ 0;\ a\ black\ Pawn\ is\ promoted\ if\r\n\ it\ is\ on\ row\ 7.\ The\ method\ removes\ the\ promoted\ Pawn\ from\ the\ board\ and\r\n\ constructs\ the\ user's\ specified\ Piece\ at\ the\ current\ Position.\r\n\ \r\n\ @param\ promotedPawn\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ promoted\ Pawn\r\n
comment21.params=
comment21.target=void\ update()
comment21.text=\r\n\ Not\ currently\ used\r\n
comment22.params=
comment22.target=void\ findCheckmate()
comment22.text=\r\n\ Determines\ whether\ a\ checkmate\ has\ occurred.\ Method\ is\ incomplete;\ must\ find\r\n\ a\ way\ to\ use\ findKingPosition()\ on\ the\ copy\ of\ the\ board\r\n
comment23.params=
comment23.target=void\ act()
comment3.params=
comment3.target=Board\ getBoard()
comment3.text=\r\n\ Accessor\ method\ to\ get\ the\ board\ -\ for\ testing\ only\r\n\ \r\n\ @return\ the\ board\r\n
comment4.params=
comment4.target=void\ playGame()
comment4.text=\r\n\ Begins\ the\ chess\ game.\ The\ game\ ends\ when\ 1)\ a\ player\ has\ been\ checkmated,\ 2)\r\n\ both\ players\ have\ agreed\ to\ a\ draw,\ 3)\ a\ player\ resigns,\ or\ 4)\ there\ is\ a\r\n\ stalemate.\ Calls\ helper\ methods\ to\ display\ prompts\ and\ play\ the\ game\r\n
comment5.params=pl\ other
comment5.target=void\ startPlayerTurn(Player,\ Player)
comment5.text=\r\n\ Begins\ a\ player's\ turn;\ a\ player\ has\ 3\ possible\ moves\ each\ turn\:\ 1)\ move\ a\r\n\ piece,\ 2)\ resign,\ or\ 3)\ request\ a\ draw\r\n\ \r\n\ @param\ pl\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ turn\ player\r\n\ @param\ other\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ opposing\ player\r\n
comment6.params=pl
comment6.target=void\ continueTurn(Player)
comment6.text=\r\n\ Selects\ the\ piece\ and\ destination\ for\ the\ player\r\n\ \r\n\ @param\ pl\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ turn\ player\r\n
comment7.params=fromPos\ toPos
comment7.target=void\ movePieceOnBoard(Position,\ Position)
comment7.text=\r\n\ Moves\ a\ Piece\ from\ one\ Tile\ to\ another\ onthe\ board\ of\ Tiles\ without\ checking\r\n\ for\ legality;\ if\ a\ capture\ is\ made,\ adds\ the\ point\ value\ of\ the\ captured\r\n\ piece\ to\ the\ turn\ player's\ score.\r\n\r\n\ @param\ fromPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ Piece's\ current\ position\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ Position\ to\ which\ the\ Piece\ will\ be\ moved\r\n\ \r\n
comment8.params=
comment8.target=boolean\ gameIsOver()
comment8.text=\r\n\ Checks\ to\ see\ if\ at\ least\ 1\ of\ the\ conditions\ that\ would\ end\ the\ game\ is\r\n\ present\r\n\r\n\ @return\ true\ if\ the\ game\ is\ over,\ false\ otherwise\r\n
comment9.params=
comment9.target=void\ displayEndgame()
comment9.text=\r\n\ Checks\ the\ endgame\ state\ and\ prints\ the\ appropriate\ message\r\n
numComments=24
