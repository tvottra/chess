#BlueJ class context
comment0.target=Board
comment0.text=\r\n\ Class\ that\ represents\ the\ chess\ board\r\n\r\n\ @author\ Andrew\ Le\r\n\ @author\ Brian\ Qiu\r\n\ @author\ Tommy\ V.\ Tran\r\n
comment1.params=
comment1.target=Board()
comment1.text=\r\n\ Default\ constructor\ that\ initializes\ the\ chess\ board\ with\ all\ of\ the\ white\r\n\ pieces,\ black\ pieces\ and\ the\ rest\ of\ the\ tiles;\ establishes\ the\ white\ and\r\n\ black\ hot\ spots\r\n
comment10.params=fromPos\ toPos\ aBoard
comment10.target=boolean\ isLegalMove(Position,\ Position,\ Tile[][])
comment10.text=\r\n\ Checks\ whether\ moving\ a\ Piece\ from\ its\ current\ Position\ to\ a\ given\ Position\r\n\ is\ legal.\r\n\r\n\ @param\ fromPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ Piece's\ current\ Position\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ Position\ of\ the\ Piece's\ proposed\ destination\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ true\ if\ the\ move\ is\ legal,\ false\ otherwise\r\n
comment11.params=fromPos\ toPos\ aBoard
comment11.target=boolean\ castleAble(Position,\ Position,\ Tile[][])
comment11.text=\r\n\ Determines\ whether\ the\ King\ at\ the\ given\ Position\ may\ castle\ on\ the\ given\r\n\ board\r\n\r\n\ @param\ fromPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ King's\ current\ Position\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ King's\ Position\ upon\ castling\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ true\ if\ castling\ is\ possible,\ false\ otherwise\r\n
comment12.params=piece\ aBoard
comment12.target=java.util.ArrayList\ getHotSpots(Piece,\ Tile[][])
comment12.text=\r\n\ Returns\ all\ the\ hotSpots\ controlled\ by\ this\ Piece;\ a\ hotspot\ is\ defined\ as\r\n\ any\ Position\ within\ the\ Piece's\ real\ range\ of\ movement\ and\ at\ which\ a\ Piece\r\n\ could\ perform\ a\ capture\ on\ a\ Piece\ of\ the\ opposing\ color;\ calls\ the\r\n\ appropriate\ helper\ method\ to\ get\ the\ hotSpots,\ depending\ on\ the\ identity\ of\r\n\ the\ piece\r\n\r\n\ @param\ piece\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Piece\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ all\ the\ Positions\ currently\ checked\ by\ this\ Piece\r\n
comment13.params=piece\ toPos\ aBoard
comment13.target=boolean\ isWithinHotSpots(Piece,\ Position,\ Tile[][])
comment13.text=\r\n\ Checks\ whether\ the\ given\ Piece's\ proposed\ destination\ is\ within\ the\ Piece's\r\n\ hotSpots\r\n\r\n\ @param\ piece\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Piece\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ destination\ Position\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ true\ if\ toPos\ is\ within\ the\ Piece's\ hotSpots,\ false\ otherwise\r\n
comment14.params=aBoard
comment14.target=java.util.ArrayList\ getWhiteHotSpots(Tile[][])
comment14.text=\r\n\ Returns\ all\ of\ white's\ checked\ hotSpots\ for\ the\ given\ board\r\n\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ board\r\n\ @return\ all\ of\ the\ hotSpots\ checked\ by\ white\ pieces\r\n
comment15.params=aBoard
comment15.target=java.util.ArrayList\ getBlackHotSpots(Tile[][])
comment15.text=\r\n\ Returns\ all\ of\ black's\ checked\ hotSpots\ for\ the\ given\ board\r\n\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ board\r\n\ @return\ all\ of\ the\ hotSpots\ checked\ by\ black\ pieces\r\n
comment16.params=pawn
comment16.target=java.util.ArrayList\ getPawnHotSpots(Piece)
comment16.text=\r\n\ Returns\ the\ hotSpots\ for\ the\ given\ Pawn\r\n\r\n\ @param\ pawn\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Pawn\r\n\ @return\ the\ hotSpots\ for\ the\ given\ Pawn\r\n
comment17.params=pawn\ aBoard
comment17.target=java.util.ArrayList\ getPawnRangeOfMovement(Piece,\ Tile[][])
comment17.text=\r\n\ Returns\ the\ given\ Pawn's\ range\ of\ movement,\ taking\ into\ consideration\r\n\ obstruction\ on\ the\ Board.\ The\ Pawn's\ range\ of\ movement\ may\ include\ forward\r\n\ tiles,\ diagonal\ tiles,\ both,\ or\ none,\ depending\ on\ the\ current\ board.\r\n\r\n\ @param\ pawn\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Pawn\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ the\ Pawn's\ real\ range\ of\ movement\r\n
comment18.params=pawn\ toPos\ aBoard
comment18.target=boolean\ isWithinPawnRangeOfMovement(Piece,\ Position,\ Tile[][])
comment18.text=\r\n\ Checks\ whether\ the\ given\ Pawn's\ proposed\ destination\ is\ within\ the\ given\r\n\ Pawn's\ true\ range\ of\ movement\r\n\r\n\ @param\ pawn\r\n\ \ \ \ \ \ \ \ \ \ \ \ pawn\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Position\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ true\ if\ toPos\ is\ within\ the\ Pawn's\ real\ range\ of\ movement,\ false\r\n\ \ \ \ \ \ \ \ \ otherwise\r\n
comment19.params=knight
comment19.target=java.util.ArrayList\ getKnightHotSpots(Piece)
comment19.text=\r\n\ Returns\ the\ hotSpots\ for\ the\ given\ Knight\r\n\r\n\ @param\ knight\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Knight\r\n\ @return\ the\ hotSpots\ for\ the\ given\ Knight\r\n
comment2.params=
comment2.target=void\ setUpWhitePieces()
comment2.text=\r\n\ Sets\ up\ all\ of\ the\ white\ pieces\ on\ the\ bottom\ two\ rows\ of\ the\ board\r\n
comment20.params=bishop\ aBoard
comment20.target=java.util.ArrayList\ getBishopHotSpots(Piece,\ Tile[][])
comment20.text=\r\n\ Returns\ the\ hotSpots\ for\ the\ given\ Bishop\r\n\r\n\ @param\ bishop\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Bishop\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ the\ hotSpots\ for\ the\ given\ Bishop\r\n
comment21.params=rook\ aBoard
comment21.target=java.util.ArrayList\ getRookHotSpots(Piece,\ Tile[][])
comment21.text=\r\n\ Returns\ the\ hotSpots\ for\ the\ given\ Rook\ on\ the\ given\ board\r\n\r\n\ @param\ rook\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Rook\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ the\ hotSpots\ for\ the\ given\ Rook\r\n
comment22.params=queen\ aBoard
comment22.target=java.util.ArrayList\ getQueenHotSpots(Piece,\ Tile[][])
comment22.text=\r\n\ Returns\ the\ hotSpots\ for\ the\ given\ Queen\r\n\r\n\ @param\ queen\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ Queen\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ the\ hotSpots\ for\ the\ given\ Queen\r\n
comment23.params=king
comment23.target=java.util.ArrayList\ getKingHotSpots(Piece)
comment23.text=\r\n\ Returns\ the\ hotSpots\ for\ the\ given\ King\r\n\r\n\ @param\ king\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ King\r\n\ @return\ the\ hotSpots\ for\ the\ given\ King\r\n
comment24.params=color\ aBoard
comment24.target=boolean\ isKingChecked(int,\ Tile[][])
comment24.text=\r\n\ Determines\ whether\ a\ King\ of\ a\ given\ color\ is\ currently\ in\ check\ on\ the\ given\r\n\ board\r\n\r\n\ @param\ color\r\n\ \ \ \ \ \ \ \ \ \ \ \ 0\ if\ white,\ 1\ if\ black\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ true\ if\ the\ King\ is\ checked,\ false\ otherwise\r\n
comment25.params=color\ aBoard
comment25.target=Position\ findKingPosition(int,\ Tile[][])
comment25.text=\r\n\ Finds\ the\ Position\ of\ the\ King\ of\ a\ given\ color\ on\ the\ given\ board\r\n\r\n\ @param\ color\r\n\ \ \ \ \ \ \ \ \ \ \ \ 0\ if\ white,\ 1\ if\ black\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ the\ Position\ of\ the\ King\r\n
comment26.params=
comment26.target=int\ getWhoIsCheckmated()
comment26.text=\r\n\ Determines\ whether\ a\ king\ is\ checkmated;\ prints\ out\ message\ if\ king\ is\r\n\ checked\r\n\r\n\ @return\ 0\ if\ the\ white\ king\ is\ checkmated,\ 1\ if\ the\ black\ king\ is\ checkmated,\r\n\ \ \ \ \ \ \ \ \ -1\ otherwise\r\n
comment27.params=color\ aBoard
comment27.target=boolean\ hasLegalMoveLeft(int,\ Tile[][])
comment27.text=\r\n\ Determines\ whether\ a\ player\ of\ the\ given\ color\ has\ any\ legal\ moves\ left\r\n\r\n\ @param\ color\r\n\ \ \ \ \ \ \ \ \ \ \ \ 0\ if\ white,\ 1\ if\ black\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ true\ if\ the\ player\ has\ at\ least\ 1\ legal\ move\ left,\ false\ otherwise\r\n
comment28.params=piece\ aBoard
comment28.target=boolean\ performMoves(Piece,\ Tile[][])
comment28.text=\r\n\ Determines\ whether\ at\ least\ one\ of\ the\ given\ piece's\ moves\ can\ be\ performed\r\n\ to\ avoid\ a\ check;\ calls\ isLegalMove\r\n\r\n\ @param\ piece\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ piece\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n\ @return\ true\ if\ at\ least\ one\ of\ the\ piece's\ moves\ can\ be\ performed,\ false\r\n\ \ \ \ \ \ \ \ \ otherwise\r\n
comment29.params=aBoard
comment29.target=void\ updateHotSpots(Tile[][])
comment29.text=\r\n\ Called\ each\ time\ after\ a\ Piece\ is\ moved.\ Removes\ all\ hotSpots\ on\ current\r\n\ board,\ then\ goes\ over\ that\ board\ and\ tags\ updated\ hotSpots\ accordingly.\r\n\ \r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ given\ 2D\ array\ of\ Tiles\r\n
comment3.params=
comment3.target=void\ setUpBlackPieces()
comment3.text=\r\n\ Sets\ up\ all\ of\ the\ black\ pieces\ on\ the\ upper\ two\ rows\ of\ the\ board\r\n
comment30.params=
comment30.target=java.lang.String\ toString()
comment30.text=\r\n\ toString\ method\ to\ print\ the\ Board\r\n\r\n\ @return\ the\ contents\ of\ each\ Tile\ as\ they\ would\ appear\ on\ a\ 2D\ chess\ board\r\n
comment4.params=
comment4.target=void\ setUpRestOfBoard()
comment4.text=\r\n\ Initializes\ all\ unoccupied\ Tiles\r\n
comment5.params=row\ col
comment5.target=Tile\ getTile(int,\ int)
comment5.text=\r\n\ Accessor\ method\ to\ get\ a\ tile\ at\ the\ specified\ location\r\n\r\n\ @param\ row\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ row\ index\ of\ the\ Tile\r\n\ @param\ col\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ column\ index\ of\ the\ Tile\r\n\ @return\ the\ Tile\ at\ board[row][col]\r\n
comment6.params=pos
comment6.target=Tile\ getTile(Position)
comment6.text=\r\n\ Accessor\ method\ to\ get\ a\ tile\ at\ the\ specified\ location\r\n\r\n\ @param\ pos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ position\ of\ the\ Tile\r\n\ @return\ the\ Tile\ at\ board[row][col]\r\n
comment7.params=
comment7.target=int\ getSize()
comment7.text=\r\n\ Accessor\ method\ to\ return\ the\ size\ of\ one\ side\ of\ the\ board\r\n\r\n\ @return\ the\ size\ of\ one\ side\ of\ the\ board\r\n
comment8.params=
comment8.target=Tile[][]\ getBoard()
comment8.text=\r\n\ Accessor\ method\ to\ get\ this\ board\r\n\r\n\ @return\ the\ board\r\n
comment9.params=fromPos\ toPos
comment9.target=boolean\ movePiece(Position,\ Position)
comment9.text=\r\n\ Moves\ a\ Piece\ at\ fromPos\ to\ toPos\ on\ the\ board\ without\ checking\ for\ legality.\r\n\r\n\ @param\ fromPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ Piece's\ current\ position\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ the\ Position\ to\ which\ the\ Piece\ will\ be\ moved\r\n\ @return\ true\ if\ there\ was\ a\ Piece\ at\ fromPos\ on\ the\ board;\ false\ otherwise.\r\n
numComments=31
