#BlueJ class context
comment0.target=Game
comment0.text=\n\ @author\ Andrew\ Le\n
comment1.params=
comment1.target=Game()
comment1.text=\n\ Constructor\ to\ initialize\ the\ players,\ gameBoard,\ and\ game\ state\n
comment10.params=row\ col\ color
comment10.target=boolean\ isValidPiece(int,\ int,\ int)
comment10.text=\n\ First\ checks\ whether\ the\ given\ row\ and\ column\ indexes\ are\ in\ bounds,\ then\n\ checks\ whether\ there\ is\ a\ Piece\ of\ the\ correct\ color\ at\ the\ specified\ row\ and\n\ column\ indexes\n\ \n\ @param\ row\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ row\ index\n\ @param\ col\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ column\ index\n\ @param\ color\n\ \ \ \ \ \ \ \ \ \ \ \ -\ 0\ for\ white,\ 1\ for\ black\n\ @return\ true\ if\ there\ is\ a\ Piece\ of\ the\ correct\ color\ at\ the\ row\ and\ column\n\ \ \ \ \ \ \ \ \ indexes,\ false\ otherwise\n
comment11.params=color\ val
comment11.target=void\ incrementScore(int,\ int)
comment11.text=\n\ Increments\ the\ score\ of\ the\ player\ with\ the\ color\ OPPOSITE\ of\ the\ given\ color\n\ by\ the\ given\ value\n\ \n\ @param\ color\n\ \ \ \ \ \ \ \ \ \ \ \ -\ 0\ if\ black,\ 1\ if\ white\n\ @param\ val\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ value\ of\ the\ captured\ piece\n\ \n
comment12.params=color
comment12.target=Player\ getPlayer(int)
comment12.text=\n\ Accessor\ method\ to\ get\ the\ player\ with\ the\ given\ color\n\ \n\ @param\ color\n\ \ \ \ \ \ \ \ \ \ \ \ -\ 0\ for\ white,\ 1\ for\ black\n\ @return\ white\ player\ if\ color\ \=\ 0,\ black\ player\ if\ color\ \=\ 1\n
comment13.params=draw
comment13.target=void\ setDraw(boolean)
comment13.text=\n\ Mutator\ method\ that\ updates\ the\ draw\ status\ of\ the\ game\n\ \n\ @param\ draw\n\ \ \ \ \ \ \ \ \ \ \ \ -\ true\ if\ there\ is\ a\ draw,\ false\ otherwise\n
comment14.params=turn
comment14.target=void\ setTurn(boolean)
comment14.text=\n\ Mutator\ method\ that\ updates\ the\ turn\n\ \n\ @param\ turn\n\ \ \ \ \ \ \ \ \ \ \ \ -\ true\ if\ it\ is\ whitePlayer's\ turn,\ false\ otherwise\n
comment15.params=stale
comment15.target=void\ setStalemate(boolean)
comment15.text=\n\ Mutator\ method\ that\ updates\ stalemate\n\ \n\ @param\ stale\n\ \ \ \ \ \ \ \ \ \ \ \ -\ true\ if\ there\ is\ a\ stalemate,\ false\ otherwise\n
comment16.params=
comment16.target=boolean\ stalemate()
comment16.text=\n\ Determines\ whether\ there\ is\ stalemate.\ A\ game\ is\ in\ stalemate\ if\ and\ only\ if\:\n\ 1)\ the\ turn\ player\ is\ not\ in\ check\ and\ the\ turn\ player\ has\ no\ legal\ moves;\ 2)\n\ threefold\ repitition\ has\ occurred;\ 3)\ fifty-move\ rule\ applies\n\n\ @return\ true\ if\ there\ is\ a\ stalemate,\ false\ otherwise\n
comment17.params=promotedPawn
comment17.target=void\ promotion(Piece)
comment17.text=\n\ Prompts\ the\ user\ to\ choose\ a\ non-Pawn,\ non-King\ Piece\ to\ replace\ the\ given\n\ Pawn.\ A\ white\ Pawn\ is\ promoted\ if\ it\ is\ on\ row\ 0;\ a\ black\ Pawn\ is\ promoted\ if\n\ it\ is\ on\ row\ 7.\ The\ method\ removes\ the\ promoted\ Pawn\ from\ the\ board\ and\n\ constructs\ the\ user's\ specified\ Piece\ at\ the\ current\ Position.\n\ \n\ @param\ promotedPawn\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ promoted\ Pawn\n
comment18.params=
comment18.target=void\ update()
comment18.text=\n\ Not\ currently\ used\n
comment19.params=
comment19.target=void\ findCheckmate()
comment19.text=\n\ Determines\ whether\ a\ checkmate\ has\ occurred.\ Method\ is\ incomplete;\ must\ find\n\ a\ way\ to\ use\ findKingPosition()\ on\ the\ copy\ of\ the\ board\n
comment2.params=name1\ name2
comment2.target=Game(java.lang.String,\ java.lang.String)
comment2.text=\n\ Constructor\ to\ initialize\ the\ players,\ gameBoard,\ and\ game\ state\n\ \n\ @param\ name1\n\ \ \ \ \ \ \ \ \ \ \ \ -\ whitePlayer's\ name\n\ @param\ name2\n\ \ \ \ \ \ \ \ \ \ \ \ -\ blackPlayer's\ name\n
comment20.params=
comment20.target=void\ act()
comment3.params=
comment3.target=Board\ getBoard()
comment3.text=\n\ Accessor\ method\ to\ get\ the\ board\ -\ for\ testing\ only\n\ \n\ @return\ the\ board\n
comment4.params=
comment4.target=void\ playGame()
comment4.text=\n\ Begins\ the\ chess\ game.\ The\ game\ ends\ when\ 1)\ a\ player\ has\ been\ checkmated,\ 2)\n\ both\ players\ have\ agreed\ to\ a\ draw,\ 3)\ a\ player\ resigns,\ or\ 4)\ there\ is\ a\n\ stalemate.\ Calls\ helper\ methods\ to\ display\ prompts\ and\ play\ the\ game\n
comment5.params=pl\ other
comment5.target=void\ PlayerTurn(Player,\ Player)
comment5.text=\n\ Begins\ a\ player's\ turn;\ a\ player\ has\ 3\ possible\ moves\ each\ turn\:\ 1)\ move\ a\n\ piece,\ 2)\ resign,\ or\ 3)\ request\ a\ draw\n\ \n\ @param\ pl\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ turn\ player\n\ @param\ other\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ opposing\ player\n
comment6.params=fromPos\ toPos
comment6.target=void\ movePieceOnBoard(Position,\ Position)
comment6.text=\n\ Moves\ a\ Piece\ from\ one\ Tile\ to\ another\ onthe\ board\ of\ Tiles\ without\ checking\n\ for\ legality;\ if\ a\ capture\ is\ made,\ adds\ the\ point\ value\ of\ the\ captured\n\ piece\ to\ the\ turn\ player's\ score.\n\n\ @param\ fromPos\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ Piece's\ current\ position\n\ @param\ toPos\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ Position\ to\ which\ the\ Piece\ will\ be\ moved\n\ \n
comment7.params=
comment7.target=boolean\ gameIsOver()
comment7.text=\n\ Checks\ to\ see\ if\ at\ least\ 1\ of\ the\ conditions\ that\ would\ end\ the\ game\ is\n\ present\n\n\ @return\ true\ if\ the\ game\ is\ over,\ false\ otherwise\n
comment8.params=
comment8.target=void\ displayEndgame()
comment8.text=\n\ Checks\ the\ endgame\ state\ and\ prints\ the\ appropriate\ message\n
comment9.params=
comment9.target=Position\ choosePosition()
comment9.text=\n\ Prompts\ the\ user\ for\ the\ row\ and\ column\ indexes\ of\ the\ Piece\ to\ be\ moved\n\n\ @return\ a\ Position\ object\ with\ Piece's\ current\ location\n
numComments=21
