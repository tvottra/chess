#BlueJ class context
comment0.target=Tile
comment0.text=\r\n\ Class\ that\ represents\ a\ tile\ on\ the\ board\r\n\r\n\ @author\ Tommy\ Tran\r\n\ @author\ Andrew\ Le\r\n\ @author\ Jonathan\ Lim\r\n
comment1.params=piece\ isWhiteHotSpot\ isBlackHotSpot
comment1.target=Tile(Piece,\ boolean,\ boolean)
comment1.text=\r\n\ Parameter\ constructor\ to\ initialize\ a\ Tile\ on\ the\ board\r\n\r\n\ @param\ piece\ \ \ \ \ \ \ \ \ \ -\ the\ piece\ that\ occupies\ the\ Slot\r\n\ @param\ isWhiteHotSpot\ -\ whether\ the\ Tile\ is\ within\ the\ range\ of\ movement\ of\ a\ white\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Piece\r\n\ @param\ isBlackHotSpot\ -\ whether\ the\ Tile\ is\ within\ the\ range\ of\ movement\ of\ a\ black\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Piece\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\r\n\ toString\ method\ for\ this\ tile\r\n\r\n\ @return\ this\ tile\ in\ the\ following\ format\:\ [Piece]\ white\ control\ \=\r\n\ [true/false]\ black\ control\ [true/false]\r\n
comment11.params=
comment11.target=void\ updateImage()
comment11.text=\r\n\ Method\ to\ update\ image\ of\ the\ Tile\ based\ on\ its\ piece\r\n
comment12.params=
comment12.target=void\ act()
comment12.text=\r\n\ Method\ of\ acting\ of\ Tile;\ updates\ image\ and\ checks\ if\ Tile\ is\ clicked\r\n
comment13.params=
comment13.target=Tile\ clicked()
comment13.text=\r\n\ Method\ to\ return\ the\ Tile\ that\ has\ been\ clicked\r\n\ @return\ clicked\ -\ clicked\ Tile\r\n
comment14.params=c
comment14.target=void\ setClicked(Tile)
comment14.text=\r\n\ Method\ to\ set\ which\ Tile\ is\ clicked\r\n\ @param\ c\ -\ new\ clicked\ Tile\r\n
comment15.params=other
comment15.target=Tile[][]\ cloneTile2DArray(Tile[][])
comment15.text=\r\n\ Clones\ a\ 2D\ Array\ of\ Tiles\ and\ returns\ the\ fresh\ copy\r\n\ \r\n\ @param\ other\r\n\ \ \ \ \ \ \ \ \ \ \ \ initial\ 2D\ Array\ of\ Tiles\r\n\ @return\ A\ copy\ of\ the\ initial\ 2D\ Array\ of\ Tiles\r\n
comment16.params=i
comment16.target=void\ setTransparency(int)
comment16.text=\r\n\ Method\ to\ set\ Transparency\ of\ the\ image\ of\ Tile\r\n
comment2.params=other
comment2.target=Tile(Tile)
comment2.text=\r\n\ Parameter\ constructor\ to\ initialize\ a\ Tile\ on\ the\ board\r\n\r\n\ @param\ other\ -\ another\ Tile\r\n
comment3.params=
comment3.target=Piece\ getPiece()
comment3.text=\r\n\ Accessor\ method\ to\ get\ the\ Piece\ on\ this\ Tile\r\n\r\n\ @return\ the\ Piece\ on\ this\ Tile\r\n
comment4.params=myPiece
comment4.target=void\ setPiece(Piece)
comment4.text=\r\n\ Mutator\ method\ to\ set\ the\ Piece\ on\ this\ Tile\ to\ the\ given\ Piece\r\n\r\n\ @param\ myPiece\ -\ the\ given\ Piece\r\n
comment5.params=
comment5.target=boolean\ isWhiteHotSpot()
comment5.text=\r\n\ Determines\ whether\ white\ has\ control\ of\ this\ Tile\r\n\r\n\ @return\ true\ if\ white\ has\ control\ over\ this\ Tile,\ false\ otherwise\r\n
comment6.params=whiteHotSpot
comment6.target=void\ setIsWhiteHotSpot(boolean)
comment6.text=\r\n\ Mutator\ method\ to\ set\ white\ control\ of\ this\ Tile\r\n\r\n\ @param\ whiteHotSpot\ -\ true\ if\ white\ has\ control\ of\ this\ Tile,\ false\ otherwise\r\n
comment7.params=
comment7.target=boolean\ isBlackHotSpot()
comment7.text=\r\n\ Determines\ whether\ black\ has\ control\ of\ this\ Tile\r\n\r\n\ @return\ true\ if\ black\ has\ control\ over\ this\ Tile,\ false\ otherwise\r\n
comment8.params=blackHotSpot
comment8.target=void\ setIsBlackHotSpot(boolean)
comment8.text=\r\n\ Mutator\ method\ to\ set\ black\ control\ of\ this\ Tile\r\n\r\n\ @param\ blackHotSpot\ -\ true\ if\ black\ has\ control\ of\ this\ Tile,\ false\ otherwise\r\n
comment9.params=
comment9.target=boolean\ hasPiece()
comment9.text=\r\n\ Determines\ whether\ this\ Tile\ has\ a\ Piece\r\n\r\n\ @return\ true\ if\ this\ Tile\ has\ a\ Piece,\ false\ otherwise\r\n
numComments=17
