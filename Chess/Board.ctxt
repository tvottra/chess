#BlueJ class context
comment0.target=Board
comment0.text=\r\n\ Class\ that\ represents\ the\ chess\ board\r\n\r\n\ @author\ Andrew\ Le\r\n\ @author\ Brian\ Qiu\r\n\ @author\ Tommy\ Tran\r\n
comment1.params=
comment1.target=Board()
comment1.text=\r\n\ Default\ constructor\ that\ initializes\ the\ chess\ board\ with\ all\ of\ the\ white\r\n\ pieces,\ black\ pieces\ and\ the\ rest\ of\ the\ tiles;\ establishes\ the\ white\ and\r\n\ black\ hot\ spots\r\n
comment10.params=fromPos\ toPos
comment10.target=boolean\ isLegalMove(Position,\ Position)
comment10.text=\r\n\ Checks\ whether\ moving\ a\ Piece\ from\ its\ current\ Position\ to\ a\ given\ Position\r\n\ is\ legal.\r\n\r\n\ @param\ fromPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ Piece's\ current\ Position\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ Position\ of\ the\ Piece's\ proposed\ destination\r\n\ @return\ true\ if\ the\ move\ is\ legal,\ false\ otherwise\r\n
comment11.params=piece\ toPos
comment11.target=boolean\ isWithinHotspots(Piece,\ Position)
comment11.text=\r\n\ Checks\ whether\ the\ given\ Piece's\ proposed\ destination\ is\ within\ the\ Piece's\r\n\ hotspots\r\n\r\n\ @param\ piece\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ Piece\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ destination\ Position\r\n\ @return\ true\ if\ toPos\ is\ within\ the\ Piece's\ hotspots,\ false\ otherwise\r\n
comment12.params=
comment12.target=java.lang.String\ toString()
comment12.text=\r\n\ toString\ method\ to\ print\ the\ Board\r\n\r\n\ @return\ the\ contents\ of\ each\ Tile\ as\ they\ would\ appear\ on\ a\ 2D\ board\r\n
comment13.params=piece
comment13.target=java.util.ArrayList\ getHotSpots(Piece)
comment13.text=\r\n\ Gets\ all\ the\ hotspots\ controlled\ by\ this\ Piece;\ a\ hotspot\ is\ defined\ as\ any\r\n\ Position\ at\ which\ a\ Piece\ could\ perform\ a\ capture;\ calls\ the\ appropriate\r\n\ helper\ method\ to\ get\ the\ hotspots,\ depending\ on\ the\ identity\ of\ the\ piece\r\n\r\n\ @param\ piece\ -\ the\ given\ Piece\r\n\ @return\ all\ the\ Positions\ currently\ checked\ by\ this\ Piece\r\n
comment14.params=aBoard
comment14.target=java.util.ArrayList\ getWhiteHotspots(Tile[][])
comment14.text=\r\n\ Returns\ all\ of\ white's\ checked\ hotspots\ for\ the\ given\ board\r\n\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ board\r\n\ @return\ all\ of\ the\ hotspots\ checked\ by\ white\ pieces\r\n
comment15.params=aBoard
comment15.target=java.util.ArrayList\ getBlackHotspots(Tile[][])
comment15.text=\r\n\ Returns\ all\ of\ black's\ checked\ hotspots\ for\ the\ given\ board\r\n\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ board\r\n\ @return\ all\ of\ the\ hotspots\ checked\ by\ black\ pieces\r\n
comment16.params=pawn
comment16.target=java.util.ArrayList\ getPawnHotspots(Piece)
comment16.text=\r\n\ Returns\ the\ hotspots\ for\ the\ given\ Pawn\r\n\r\n\ @param\ pawn\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ Pawn\r\n\ @return\ the\ hotspots\ for\ the\ given\ "Pawn"\r\n
comment17.params=knight
comment17.target=java.util.ArrayList\ getKnightHotspots(Piece)
comment17.text=\r\n\ Returns\ the\ hotspots\ for\ the\ given\ Knight\r\n\r\n\ @param\ knight\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ Knight\r\n\ @return\ the\ hotspots\ for\ the\ given\ "Knight"\r\n
comment18.params=bishop
comment18.target=java.util.ArrayList\ getBishopHotspots(Piece)
comment18.text=\r\n\ Returns\ the\ hotspots\ for\ the\ given\ Bishop\r\n\r\n\ @param\ bishop\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ Bishop\r\n\ @return\ the\ hotspots\ for\ the\ given\ "Bishop"\r\n
comment19.params=rook
comment19.target=java.util.ArrayList\ getRookHotspots(Piece)
comment19.text=\r\n\ Returns\ the\ hotspots\ for\ the\ given\ Rook\r\n\r\n\ @param\ rook\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ Rook\r\n\ @return\ the\ hotspots\ for\ the\ given\ "Rook"\r\n
comment2.params=
comment2.target=void\ setUpWhitePieces()
comment2.text=\r\n\ Sets\ up\ all\ of\ the\ white\ pieces\ on\ the\ bottom\ two\ rows\ of\ the\ board\r\n
comment20.params=queen
comment20.target=java.util.ArrayList\ getQueenHotspots(Piece)
comment20.text=\r\n\ Returns\ the\ hotspots\ for\ the\ given\ Queen\r\n\r\n\ @param\ queen\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ Queen\r\n\ @return\ the\ hotspots\ for\ the\ given\ "Queen"\r\n
comment21.params=king
comment21.target=java.util.ArrayList\ getKingHotspots(Piece)
comment21.text=\r\n\ Returns\ the\ hotspots\ for\ the\ given\ King\r\n\r\n\ @param\ king\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ King\r\n\ @return\ the\ hotspots\ for\ the\ given\ "King"\r\n
comment22.params=color\ aBoard
comment22.target=boolean\ isKingChecked(int,\ Tile[][])
comment22.text=\r\n\ Determines\ whether\ a\ King\ of\ a\ given\ color\ is\ currently\ in\ check\ on\ the\ given\r\n\ board\r\n\r\n\ @param\ color\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ 0\ if\ white,\ 1\ if\ black\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ board\r\n\ @return\ true\ if\ the\ King\ is\ checked,\ false\ otherwise\r\n
comment23.params=color\ aBoard
comment23.target=Position\ findKingPosition(int,\ Tile[][])
comment23.text=\r\n\ Finds\ the\ Position\ of\ the\ King\ of\ a\ given\ color\ in\ the\ given\ board\r\n\ @param\ color\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ 0\ if\ white,\ 1\ if\ black\r\n\ @param\ aBoard\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ given\ board\r\n\ @return\ the\ Position\ of\ the\ King\r\n
comment24.params=
comment24.target=void\ updateHotSpots()
comment24.text=\r\n\ Should\ be\ called\ each\ time\ after\ a\ Piece\ is\ moved,\ looping\ through\ all\ of\ the\r\n\ Tiles\ and\ updating\ the\ isWhiteHotSpot\ and\ isBlackHotSpot\ for\ each\ Tile\r\n
comment25.params=
comment25.target=Tile[][]\ getBoard()
comment25.text=\r\n\ Accessor\ method\ to\ get\ this\ board\r\n\ \r\n\ @return\ the\ board\r\n
comment26.params=
comment26.target=int\ getWhoIsCheckmated()
comment26.text=\r\n\ Determines\ whether\ a\ king\ is\ checkmated\r\n\ \r\n\ @return\ 0\ if\ the\ white\ king\ is\ checkmated,\ 1\ if\ the\ black\ king\ is\ checkmated,\r\n\ \ \ \ \ \ \ \ \ -1\ otherwise\r\n
comment3.params=
comment3.target=void\ setUpBlackPieces()
comment3.text=\r\n\ Sets\ up\ all\ of\ the\ black\ pieces\ on\ the\ upper\ two\ rows\ of\ the\ board\r\n
comment4.params=
comment4.target=void\ setUpRestOfBoard()
comment4.text=\r\n\ Initializes\ all\ unoccupied\ Tiles,\ along\ with\ white/black\ control\ of\ each\ Tile\r\n
comment5.params=row\ col
comment5.target=Tile\ getTile(int,\ int)
comment5.text=\r\n\ Accessor\ method\ to\ get\ a\ tile\ at\ the\ specified\ location\r\n\r\n\ @param\ row\ -\ the\ row\ index\ of\ the\ Tile\r\n\ @param\ col\ -\ the\ column\ index\ of\ the\ Tile\r\n\ @return\ the\ Tile\ at\ board[row][col]\r\n
comment6.params=pos
comment6.target=Tile\ getTile(Position)
comment6.text=\r\n\ Accessor\ method\ to\ get\ a\ tile\ at\ the\ specified\ location\r\n\r\n\ @param\ pos\ -\ the\ position\ of\ the\ Tile\r\n\ @return\ the\ Tile\ at\ board[row][col]\r\n
comment7.params=
comment7.target=int\ getSize()
comment7.text=\r\n\ Accessor\ method\ to\ return\ the\ size\ of\ one\ side\ of\ the\ board\r\n\r\n\ @return\ the\ size\ of\ the\ board\r\n
comment8.params=fromPos\ toPos
comment8.target=boolean\ movePiece(Position,\ Position)
comment8.text=\r\n\ Moves\ a\ Piece\ at\ fromPos\ to\ toPos\ on\ the\ board\ without\ checking\ for\ legality.\r\n\r\n\ @param\ fromPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ Piece's\ current\ position\r\n\ @param\ toPos\r\n\ \ \ \ \ \ \ \ \ \ \ \ -\ the\ Position\ to\ which\ the\ Piece\ will\ be\ moved\r\n\r\n\ @return\ true\ if\ there\ was\ a\ Piece\ at\ fromPos\ on\ the\ board;\ false\ otherwise.\r\n
comment9.params=fromPos\ toPos
comment9.target=boolean\ castleAble(Position,\ Position)
numComments=27
